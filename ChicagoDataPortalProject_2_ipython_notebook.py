# -*- coding: utf-8 -*-
"""Group3_Project 2_ipython_notebook

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a-OGxyRjVhsAiaRevvBQNRuZcwYypQ9J

### Chicago

#Import
"""

import altair as alt # Loading the altair library
import pandas as pd
import geopandas as gpd
from shapely import wkt
from shapely.geometry import Point

"""#Data"""

schools = pd.read_csv("https://drive.google.com/uc?id=1DTuNqcrRWBllHefYY1ochwR6Liu9vQoS")
schools.head()

housing = pd.read_csv('https://drive.google.com/uc?id=1C9QicVB801pio4bM-eTLyTH1UGcyKWbS')
housing.head()

boundries = gpd.read_file('https://gist.githubusercontent.com/JacksonGiemza/4014f0b48ce6be9386b0a22d7ba0f717/raw/d9c64bc41eebdef48b5c1327a8c320aeab48753d/chicago_neighborhood_boundaries.geojson')
boundries = boundries[boundries['pri_neigh'] != "O'Hare"] # remove O'Hare bcs no one lives there
boundries.head()

"""#Code"""

housing_points = alt.Chart(housing).mark_circle(size=30, color='steelblue').encode(
    longitude='Longitude:Q',
    latitude='Latitude:Q',
)

housing_points

school_points = alt.Chart(schools).mark_circle(size=30, color='firebrick').encode(
    longitude='Long:Q',
    latitude='Lat:Q'
)

school_points

chi = alt.Chart(boundries).mark_geoshape(
    fill='lightgray',
    stroke='white'
).project('albersUsa').properties(
    width=500,
    height=300
)

h = alt.Chart(housing).mark_circle().encode(
    longitude='Longitude:Q',
    latitude='Latitude:Q',
    size=alt.value(10)
).properties(
    title='Affordable Housing',
    width=500,
    height=300
)

s = alt.Chart(schools).mark_circle(
    color='red'
).encode(
    longitude='Long:Q',
    latitude='Lat:Q',
    size=alt.value(10)
).properties(
    title='Public Schools',
    width=500,
    height=300
)


alt.hconcat(chi+h,chi+s)

schools_df = schools.copy()
schools_df['geometry'] = schools['the_geom'].apply(lambda x: Point(wkt.loads(x)))
schools_gdf = gpd.GeoDataFrame(schools_df, crs='EPSG:4326', geometry='geometry')
schools_neighborhood = gpd.sjoin(schools_gdf, boundries)
schools_per_neighborhood = schools_neighborhood.groupby('pri_neigh').size().reset_index(name='school_count')
neighborhood_most_schools = schools_per_neighborhood.loc[schools_per_neighborhood['school_count'].idxmax()]

print("Schools per Neighborhood:")
print(schools_per_neighborhood)

print("\nNeighborhood with the Most Schools:")
print(neighborhood_most_schools)

choropleth = alt.Chart(boundries).mark_geoshape().encode(
    color=alt.Color('school_count:Q', title='Count', scale=alt.Scale(scheme='reds'))
    # tooltip=[alt.Tooltip('state:N', title='State'), alt.Tooltip('count:Q', title='Count')]
).transform_lookup(
    lookup='pri_neigh',
    from_=alt.LookupData(schools_per_neighborhood, 'pri_neigh', list(schools_per_neighborhood.columns))
).properties(
    title='School Counts',
    width=500,
    height=300
).project(
    type='albersUsa'
)

choropleth

choropleth = alt.Chart(boundries).mark_geoshape().encode(
    color=alt.Color('school_count:Q', title='Count', scale=alt.Scale(scheme='blues')),
    tooltip=['pri_neigh']
).transform_lookup(
    lookup='pri_neigh',
    from_=alt.LookupData(schools_per_neighborhood, 'pri_neigh', list(schools_per_neighborhood.columns))
).properties(
    title='School Counts',
    width=500,
    height=300
).project(
    type='albersUsa'
)

housing_points = alt.Chart(housing).mark_circle(
    color='black',
    opacity=.5
).encode(
    longitude='Longitude:Q',
    latitude='Latitude:Q',
    size=alt.value(10),
    tooltip=['Property Type']
)

choropleth + housing_points

choropleth = alt.Chart(boundries).mark_geoshape().encode(
    color=alt.Color('school_count:Q', title='Count')
).transform_lookup(
    lookup='pri_neigh',
    from_=alt.LookupData(schools_per_neighborhood, 'pri_neigh', list(schools_per_neighborhood.columns))
).properties(
    title='School & Housing Points',
    width=700,
    height=500
).project(
    type='albersUsa'
)

property_types = alt.Chart(housing).mark_circle(color='black',opacity=0.5,size=10).encode(
    longitude='Longitude:Q',
    latitude='Latitude:Q',
    tooltip=('Property Type','Latitude','Longitude')
)

school_points = alt.Chart(schools).mark_circle(color='orange',opacity=0.5,size=10).encode(
    longitude='Long:Q',
    latitude='Lat:Q',
    tooltip=('Short_Name','Long','Lat')
)

choropleth + property_types + school_points

"""#Final Visualizations

"""

schools_df = schools.copy()
schools_df['geometry'] = schools['the_geom'].apply(lambda x: Point(wkt.loads(x)))
schools_gdf = gpd.GeoDataFrame(schools_df, crs='EPSG:4326', geometry='geometry')
schools_neighborhood = gpd.sjoin(schools_gdf, boundries)
schools_per_neighborhood = schools_neighborhood.groupby('pri_neigh').size().reset_index(name='school_count')
neighborhood_most_schools = schools_per_neighborhood.loc[schools_per_neighborhood['school_count'].idxmax()]

print("Schools per Neighborhood:")
print(schools_per_neighborhood)

print("\nNeighborhood with the Most Schools:")
print(neighborhood_most_schools)

choropleth = alt.Chart(boundries).mark_geoshape().encode(
    color=alt.Color('school_count:Q', title='Density of Schools', scale=alt.Scale(scheme='blues'))
).transform_lookup(
    lookup='pri_neigh',
    from_=alt.LookupData(schools_per_neighborhood, 'pri_neigh', list(schools_per_neighborhood.columns))
).properties(
    width=700,
    height=500
).project(
    type='albersUsa'
)

housing_points = alt.Chart(housing).mark_circle(
    color='red',
    opacity=1
).encode(
    longitude='Longitude:Q',
    latitude='Latitude:Q',
    size=alt.value(20),
    color=alt.Color('Source:N', scale=alt.Scale(domain=['Affordable Housing'],
                                                range=['red']),title='')
)

choropleth_scatter = choropleth + housing_points

choropleth_scatter.configure_view(stroke=None)

housing_df = housing.copy()
housing_df

housing_per_neighborhood = housing_df.groupby('Community Area Name')['Units'].sum().reset_index(name='housing_count')

housing_per_neighborhood.rename(columns={'Community Area Name': 'pri_neigh'}, inplace=True)

merged_data = pd.merge(schools_per_neighborhood, housing_per_neighborhood, on='pri_neigh', how='inner')

max_schools = merged_data['school_count'].max()
merged_data['is_max_schools'] = merged_data['school_count'] == max_schools

print(merged_data)

housing_gdf = gpd.GeoDataFrame(housing_df, geometry=gpd.points_from_xy(housing_df.Longitude, housing_df.Latitude))
merged_gdf = boundries.merge(housing_gdf, left_on='pri_neigh', right_on='Community Area Name', how='left')
merged_gdf

property_type_counts = merged_gdf.groupby(['pri_neigh', 'Property Type']).size().reset_index(name='property_type_count')
multifamily_counts = property_type_counts[property_type_counts['Property Type'] == 'Multifamily']
multifamily_counts

multifamily_counts_subset = multifamily_counts[['pri_neigh', 'property_type_count']]
merged_data_final = pd.merge(merged_data, multifamily_counts_subset, on='pri_neigh', how='inner')

if 'Property Type' in merged_data_final.columns:
    merged_data_final.drop(columns=['Property Type'], inplace=True)

merged_data_final

scatter_plot = alt.Chart(merged_data_final).mark_circle(size=60).encode(
    x=alt.X('school_count:Q', title='Number of Schools'),
    y=alt.Y('housing_count:Q', title='Number of Housing Units'),
    color=alt.condition(
        alt.datum.is_max_schools,  # If the datum's 'is_max_schools' is True
        alt.value('blue'),  # then use the color red
        alt.value('green')  # else use the color blue
    ),
    tooltip=[
        alt.Tooltip('pri_neigh:N', title='Neighborhood'),
        alt.Tooltip('school_count:Q', title='Number of Schools'),
        alt.Tooltip('housing_count:Q', title='Number of Housing Units'),
        alt.Tooltip('is_max_schools:N', title='Has Maximum Schools')
    ]
).properties(
    title='Schools vs. Housing Units by Neighborhood',
    width=600,
    height=400
)

scatter_plot

scatter_plot = alt.Chart(merged_data_final).mark_circle(size=100, color='#4DB6AC').encode(
    x=alt.X('school_count:Q', title='Number of Schools'),
    y=alt.Y('housing_count:Q', title='Number of Housing Units'),
    tooltip=[
        alt.Tooltip('pri_neigh:N', title='Neighborhood'),
        alt.Tooltip('school_count:Q', title='Number of Schools'),
        alt.Tooltip('housing_count:Q', title='Number of Housing Units'),
        alt.Tooltip('is_max_schools:N', title='Has Maximum Schools')
    ]
).properties(
    title='Schools vs. Housing Units by Neighborhood',
    width=600,
    height=400
).configure_title(
    fontSize=20
).configure_axis(
    labelFontSize=12,
    titleFontSize=14
)

scatter_plot

property_counts = housing['Property Type'].value_counts().reset_index().rename(columns={'index': 'Property Type', 'Property Type': 'count'})
property_counts = property_counts.sort_values(by='count', ascending=False)

# Filter to include only the top 10 property types
top_10_property_counts = property_counts.head(10)
bar_chart_single_color = alt.Chart(top_10_property_counts).mark_bar(color='#4DB6AC').encode(
    x=alt.X('Property Type', title='Property Type', sort='-y', axis=alt.Axis(labelAngle=-35)),  # Sort in descending order
    y=alt.Y('count:Q', title='Number of Properties'),
    tooltip=['Property Type', 'count']
).properties(
    width=600,
    height=400,
    title='Top 10 Property Types'
).configure_title(
    fontSize=20  # Adjust the main title font size
).configure_axis(
    labelFontSize=13,  # Adjust the axis labels font size
    titleFontSize=15  # Adjust the axis titles font size
).configure_legend(
    titleFontSize=13,  # Adjust the legend title font size
    labelFontSize=15  # Adjust the legend labels font size
)

bar_chart_single_color

# Grand Boulevard Zoom

schools_neighborhood = gpd.sjoin(schools_gdf, boundries)
schools_neighborhood['Source'] = 'Public Schools'
housing['Source'] = 'Affordable Housing'

grand_boulevard_map = alt.Chart(boundries[boundries['pri_neigh'] == 'Grand Boulevard']).mark_geoshape(
                                    fill='lightgray',
                                    opacity=0.6
                                ).project('albersUsa').properties(
                                    width=500,
                                    height=300,
                                    title='Grand Boulevard'
                                )



grand_boulevard_schools = alt.Chart(schools_neighborhood[schools_neighborhood['pri_neigh'] == 'Grand Boulevard']).mark_circle().encode(
                                        longitude='Long:Q',
                                        latitude='Lat:Q',
                                        size=alt.value(100),
                                        color=alt.Color('Source:N', scale=alt.Scale(domain=['Public Schools', 'Affordable Housing'],
                                                range=['steelblue', 'red']))
                                    )




grand_boulevard_housing = alt.Chart(housing[housing['Community Area Name'] == 'Grand Boulevard']).mark_circle().encode(
                                        longitude='Longitude:Q',
                                        latitude='Latitude:Q',
                                        size=alt.value(40),
                                        color=alt.Color('Source:N', scale=alt.Scale(domain=['Public Schools', 'Affordable Housing'],
                                                range=['steelblue', 'red']))
                                    )


grand_boulevard_zoom = grand_boulevard_map + grand_boulevard_schools + grand_boulevard_housing

grand_boulevard_zoom.configure_view(stroke=None)

# Englewood Zoom

englewood_map = alt.Chart(boundries[boundries['pri_neigh'] == 'Englewood']).mark_geoshape(
    fill='lightgray',
    opacity=0.6
    ).project('albersUsa').properties(
    width=500,
    height=300,
    title='Englewood'
)


schools_neighborhood['Source'] = 'Public Schools'

englewood_schools = alt.Chart(schools_neighborhood[schools_neighborhood['pri_neigh'] == 'Englewood']).mark_circle().encode(
    longitude='Long:Q',
    latitude='Lat:Q',
    size=alt.value(100),
    color=alt.Color('Source:N', scale=alt.Scale(domain=['Public Schools', 'Affordable Housing'],
                                                range=['steelblue', 'red']))
)

englewood_housing = alt.Chart(housing[housing['Community Area Name'] == 'Englewood']).mark_circle().encode(
    longitude='Longitude:Q',
    latitude='Latitude:Q',
    size=alt.value(40),
    color=alt.Color('Source:N', scale=alt.Scale(domain=['Public Schools', 'Affordable Housing'],
                                                range=['steelblue', 'red']))
)

englewood_zoom = englewood_map + englewood_schools + englewood_housing

englewood_zoom.configure_view(stroke=None)

